name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.9.0
        ports:
          - 6333:6333
          - 6334:6334
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Wait for Qdrant to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:6333/health; do sleep 1; done'
    
    - name: Run linting checks
      run: |
        # Type checking with mypy
        mypy claude_indexer --ignore-missing-imports || true
        
        # Code formatting check with black
        black --check claude_indexer tests
        
        # Import sorting check with isort
        isort --check-only claude_indexer tests
        
        # Basic linting with flake8
        flake8 claude_indexer tests
    
    - name: Run unit tests
      env:
        PYTHONPATH: .
      run: |
        pytest tests/unit -v --tb=short --strict-markers
    
    - name: Run integration tests
      env:
        PYTHONPATH: .
      run: |
        pytest tests/integration -v --tb=short --strict-markers
    
    - name: Run end-to-end tests
      env:
        PYTHONPATH: .
      run: |
        pytest tests/e2e -v --tb=short --strict-markers
    
    - name: Run full test suite with coverage
      env:
        PYTHONPATH: .
      run: |
        pytest tests/ --cov=claude_indexer --cov-report=xml --cov-report=html --cov-fail-under=90 --durations=10
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
    
    - name: Test CLI installation and basic commands
      env:
        PYTHONPATH: .
      run: |
        # Test that CLI can be imported
        python -c "from claude_indexer.cli import cli; print('CLI import successful')"
        
        # Test help command (if Click is available)
        python -m claude_indexer.cli --help || echo "CLI help test completed (Click may not be available)"

  test-optional-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Test minimal installation
      run: |
        python -m pip install --upgrade pip
        # Install only core dependencies
        pip install tree-sitter tree-sitter-python jedi requests numpy
        
        # Test that core functionality works without optional dependencies
        python -c "from claude_indexer.config import IndexerConfig; print('Core config works')"
        python -c "from claude_indexer.analysis.parser import CodeParser; print('Parser works')"
        
        # Test graceful degradation when optional components are missing
        python -c "
import sys
try:
    from claude_indexer.cli import cli
    print('CLI import successful')
except ImportError as e:
    print(f'CLI import failed as expected: {e}')
"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit[toml]
        bandit -r claude_indexer -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  docs-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Check documentation
      run: |
        # Check that key documentation files exist
        test -f README.md
        test -f CLAUDE.md
        test -f docs/tests.md
        
        # Check that docstrings are present in key modules
        python -c "
import ast
import sys
from pathlib import Path

def check_docstrings(file_path):
    with open(file_path) as f:
        tree = ast.parse(f.read())
    
    for node in ast.walk(tree):
        if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
            if not ast.get_docstring(node):
                print(f'Missing docstring in {file_path}: {node.name}')
                return False
    return True

# Check key modules
key_files = [
    'claude_indexer/config.py',
    'claude_indexer/indexer.py',
]

all_good = True
for file_path in key_files:
    if Path(file_path).exists():
        if not check_docstrings(file_path):
            all_good = False

if not all_good:
    print('Some docstrings are missing')
    sys.exit(1)
else:
    print('Documentation check passed')
"

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.9.0
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Wait for Qdrant
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:6333/health; do sleep 1; done'
    
    - name: Run performance tests
      env:
        PYTHONPATH: .
      run: |
        # Run only performance-related tests
        pytest tests/e2e/test_end_to_end.py::TestPerformanceAndScalability -v --tb=short
    
    - name: Performance regression check
      run: |
        echo "Performance regression checks would go here"
        echo "Could compare with baseline metrics from previous runs"